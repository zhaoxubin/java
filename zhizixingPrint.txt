import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Stack;
import java.util.Queue;
/*
public class TreeNode {
      int val = 0;
      TreeNode left = null;
      TreeNode right = null;
public TreeNode(int val) {
       this.val = val;
 }
} */
public class Solution {
  public ArrayList<ArrayList<Integer> > Print(TreeNode pRoot) {
  ArrayList<ArrayList<Integer> > result = new ArrayList<>();
  if(pRoot == null){
    return result;
} 
    Stack<TreeNode> st = new Stack<>();
    Queue<TreeNode> q = new LinkedList<>(); 
    st.push(pRoot);
    int dir = 1; 
    ArrayList<Integer> list = new ArrayList<>();
    while(!st.empty()){
    int size = st.size(); 
    for(int i = 0; i < size; i++){
    TreeNode curr = st.pop();
    list.add(curr.val);
   TreeNode first = (dir == 1) ? curr.left : curr.right;
   TreeNode second = (dir == 1) ? curr.right : curr.left;
   if(first != null) q.offer(first);
   if(second != null) q.offer(second);
  } 
  result.add(new ArrayList(list));
  list.clear();
  while(!q.isEmpty()){
  st.push(q.poll());
     } 
dir = (dir == 1) ? 2 : 1;
   }
 return result;
  }
}