/*
*假设面包店有面包师傅生产面包，消费者消费面包
* 1，面包师傅有5个，不停生产，每次生产3个
* 2,消费者有20个，不停消费，每次消费1个
* 3，库存上限100个，下限0，大于上限就不能生产，等于0开始生产
 */
public class SignalTest {
    //表示 库存
    private static int Sum;
    public static void main(String[] args) {
       //五个面包师傅同时启动
        for (int i = 0; i < 5; i++) {
            new Thread(()->{
                try{
                while(true) {
                    synchronized (SignalTest.class) {
                        if (Sum + 3 > 100) {
                            SignalTest.class.wait();
                        } else {
                            Sum += 3;
                            System.out.println(Thread.currentThread().getName()+"生产了面包，库存"+Sum);

                            SignalTest.class.notify(); //随机通知一个wait方法阻塞线程 //通知其他线程不是此时的wait线程
                            // SignalTest.class.notifyAll();//通知全部wait方法阻塞线程
                        }
                    }
                    Thread.sleep(200);
                 }
                }catch (InterruptedException e){
                    e.printStackTrace();
                }
            },"面包师傅"+"["+i+"]").start();
        }
        //20个消费者同时启动
        for (int i = 0; i < 20; i++) {
            new Thread(()->{
                try{
                    while(true) {
                        synchronized (SignalTest.class) {
                            if (Sum == 0) {
                                SignalTest.class.wait();
                            } else {
                                Sum --;
                                System.out.println(Thread.currentThread().getName()+"消费了了面包，库存"+Sum);
                                SignalTest.class.notify();
                               // SignalTest.class.notifyAll();
                            }
                        }
                        Thread.sleep(200);
                    }
                }catch (InterruptedException e){
                    e.printStackTrace();
                }
            },"消费者"+"["+i+"]").start();
        }
    }
}
