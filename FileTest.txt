import org.junit.Test;

import java.io.File;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;

public class FileTest {
    @Test
    public void t1(){
        //全路径
        File  file = new File("D:\\IDEA2018\\WebCode\\IO\\data\\数据.txt");
        System.out.println(file.exists());
        //相对路径(找不到)
        File f2 = new File("../data/随便.txt");
        System.out.println(f2.exists());
        //
        //（相对路径/可以）
        //怎末查看当前Java代码的路径 （推荐）
        //File f3 = new File(".");
        //System.out.println(f3.getAbsolutePath());//获取绝对路径

        File f3 = new File("data/数据.txt");//file类写相对路径尽量不要在真实项目中使用
        System.out.println(f3.exists());//文件是否存在
        System.out.println(f3.getPath());//获取路径
        System.out.println(f3.lastModified());//上次修改时间

        System.out.println();//
        System.out.println();//
        System.out.println();//
        System.out.println();//
    }
    @Test
    public void t2(){
        File f5 = new File("D:\\IDEA2018\\WebCode");
        List<File> children = list(f5);
        for (File child : children) {
            System.out.println(child.getName());//文件名
        }
    }

    //递归获取目录下所有的子文件和子文件夹
    public static List<File> list(File f){
        List<File> files = new ArrayList<>();
        if(f.isFile())
            files.add(f);
        else{
            //下一级子文件、子文件夹
            File[] children = f.listFiles();
            for(File child : children){
                List<File> subs = list(child);
                files.addAll(subs);
            }
        }
        return files;
    }
}
