public class SynchronizedDemo {
    //语法一：1,静态方法上
    public static synchronized  void test1(){

    }
    //test1写法 == test1_2写法
    public static void test1_2(){
        synchronized (SynchronizedDemo.class){

        }
    }
// 2,实例方法上：实例同步方法
    public  synchronized  void test2(){

    }
    //test2=test2_2的写法
    public void test2_2(){
        synchronized (this){

        }
    }

    public static void main(String[] args) {
        Object o = new Object();
        //1，对象头，每个对象有对象头，包含锁，
       //2，synchronized是获取对象锁的操作
        //1)申请对象锁成功，
        //（1） 持有对象锁，并进入代码块
        // （2）执行代码，
        // （3）退出代码块并归还对象锁 --》JVM会将竞争失败的线程唤醒
        // --》环形的线程重新竞争----》循环1和2）逻辑
        //
        //（2）申请失败，线程进入一个同步队列中阻塞
        //          JVM管理synchronized 竞争失败线程，
        //               ---》由运行态转变为阻塞态的方式
        //               ---》将线程放到一个同步队列的数据结构中
        //               ---》对象锁再次可用，将所有竞争这个对象锁失败的线程唤醒（阻塞态转变为被唤醒）
      //3，对象：普通Java对象，类对象（Jvm把类当对象管理）
       //4，注意事项：
        //1） 多个线程只有对同一个对象申请对象锁时，才会同步互斥的作用
        // ————同步互斥，同步代码块，在一个时间点，只有一个线程运行
        //2）多个线程竞争不同对象对象锁，不会发生同步互斥
        //5，静态同步方法，实例同步方法都可以转变，同步代码块

        //语法三：同步代码块
        synchronized (o){

        }
    }
}
