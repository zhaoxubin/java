public class MyPriorityQueue {
    private int[] array = new int[100];
    private int size = 0;
    //入队列
    public  void offer(int val){
        array[size] = val;
        size ++;
        //把新加入的元素进行向上调整
        shiftUp(array,size-1);
    }
    public static void shiftUp(int[] array,int index){
        int child = index;
        int parent = (child - 1)/2;
        while(child > 0){
            if(array[parent] < array[child]){
                //当前不符合大堆结构，就进行调整
                int temp = array[parent];
                array[parent] = array[child];
                array[child] = temp;
            } else{
                break;//发现当前父节点比子节点大，这时说明整个数组已经符合堆的要求了
            }
            child = parent;
            parent = (child-1)/2;
        }
    }
    //出队列
    public int poll(){
        //下标为0，即队首元素，删除堆顶元素，还要保证剩下的结构依旧为堆
        int result = array[0];  // 先将队首元素保存下来
        array[0] = array[size-1]; //再将队尾元素粘到队首
        size--; //表示删除一个元素
        shiftDown(array,size,0); //针对队首元素进行向下调整
        return result; //返回保存的队首元素
    }
    public static void shiftDown(int[] array, int size,int index ){
        int parent  = index;
        int child = 2 * parent + 1;//通过parent找到child的下标
        while(child < size){
            //比较左右子树找到较小值
            if(child + 1 < size && array[child+1] > array[child] ){
                child = child + 1;
            }
            //经过上面的比较已经不知道child是左子树，还是右子树了
            //但是child下标一定对应左右子树中的较小值下标

            //拿child位置元素与parent位置元素比较
            if(array[child] > array[parent]){  //不符合就交换父子节点
                int temp = array[child];
                array[child] = array[parent];
                array[parent] = temp;
            } else {
                //调整完毕，不需要再调整
                break;
            }
            //更新parent和child节点，处理下一层数据
            parent = child;
            child = 2 * parent + 1;
        }
    }
    public int peek(){
        return array[0];
    }
public boolean isEmpty(){
        return size == 0;
}
    public static void main(String[] args) {
        MyPriorityQueue queue = new MyPriorityQueue();
        queue.offer(9);
        queue.offer(5);
        queue.offer(2);
        queue.offer(7);
        queue.offer(3);
        queue.offer(6);
        queue.offer(8);
        while (!queue.isEmpty()){
            int cur = queue.poll();
            System.out.print(cur + " ");
        }
    }
}
