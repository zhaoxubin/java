/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 import java.util.List;
 import java.util.HashMap;
 import java.util.ArrayList;
 import java.util.LinkedList;
 import java.util.Queue;
class Solution {
    public int[] findMode(TreeNode root) {
      if(root == null){
          return new int[0];
      }
      List<Integer> list = bianLi(root);
      Map<Integer,Integer> map = new HashMap<>();
      for(int i = 0; i < list.size(); i++){
          int temp = list.get(i);
          map.put(temp,map.getOrDefault(temp,0)+1);
      }
      int max = 0;
      for(int key : map.keySet()){
          if(map.get(key) > max){
              max = map.get(key); 
          }
      }
      list = new ArrayList<>();
      for(int key : map.keySet()){
          if(map.get(key) == max){
              list.add(key);
          }
      }
      int[] array = new int[list.size()];
      for(int i = 0; i < array.length; i++){
          array[i] = list.get(i);
      }
      return array;
    }
    public static List<Integer> bianLi(TreeNode root){
       List<Integer> list = new ArrayList<>();
       if(root == null){
           return null;
       }
       Queue<TreeNode> queue = new LinkedList<>();
       queue.offer(root);
       while(!queue.isEmpty()){
           int size = queue.size();
           for(int i = 0; i < size; i++){
               TreeNode ret = queue.poll();
           list.add(ret.val);
           if(ret.left != null){
               queue.offer(ret.left);
           }
           if(ret.right != null){
               queue.offer(ret.right);
           }
           } 
       }
       return list;
    }
}