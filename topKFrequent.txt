class Solution {
       static class MyComparator implements Comparator<String>{
        private Map<String,Integer> map;
             public MyComparator(Map<String, Integer> map) {
            this.map = map;
              }

        @Override
        public int compare(String o1, String o2) {
            int count1 =map.get(o1);
            int count2 = map.get(o2);
            if(count1 == count2){
                //String自身实现了Comparable，自带字典序的比较功能
                //CompareTo就是使用String默认的比较规则
                return o1.compareTo(o2);
            }
            return count2-count1;
        }
    }
    public List<String> topKFrequent(String[] words,int k){
        //先统计各单词出现次数
        Map<String,Integer> map = new HashMap<>();
        for (String s : words ) {
            int count = map.getOrDefault(s,0);//获取到当前单词出现次数
            map.put(s,count+1);//存入map中
        }
        //把刚才统计到的字符串放到ArrayList中
        //KeySet相当于得到了一个Set,Set中存放的就是所有的key
        ArrayList<String> arrayList = new ArrayList(map.keySet());
     //按照刚才的统计次数，针对ArrayList进行排序
        //sort默认按元素自身大小进行升序排序（String的字典序）
        //此处我们要按照字符串出现次数降序排序，也就需要比较器自定制比较规则
        Collections.sort(arrayList,new MyComparator(map));
        return arrayList.subList(0,k);
    }
}