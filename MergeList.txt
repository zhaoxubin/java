

解决思路1：归并
/*
public class ListNode {
    int val;
    ListNode next = null;

    ListNode(int val) {
        this.val = val;
    }
}*/
public class Solution {
    public ListNode Merge(ListNode list1,ListNode list2) {
        if(list1 == null){  
           return list2;
        }
        if(list2 == null){
            return list1;
        }
        ListNode newHead = null;
        ListNode newTail = null;
        while(list1 != null && list2 != null){
            ListNode p = list1.val < list2.val ? list1:list2;
            if(p == list1){
                list1 = list1.next;
            } else {
                list2 = list2.next;
            }
            if(newHead == null){
                newHead = p;
                newTail = p;
            } else {
                newTail.next = p;
                newTail = p;
            }
        }
        if(list1 == null){
            newTail.next = list2;
        }else{
            newTail.next = list1;
        }
        return newHead;
    }
}

解决思路2：递归

/*
public class ListNode {
    int val;
    ListNode next = null;

    ListNode(int val) {
        this.val = val;
    }
}*/
public class Solution {
    public ListNode Merge(ListNode list1,ListNode list2) {
        if(list1 == null){
            return list2;
        }
        if(list2 == null){
            return list1;
        }
        ListNode newHead = null;
        if(list1.val < list2.val){
            newHead = list1;
            list1 = list1.next;
        }else{
            newHead = list2;
            list2 = list2.next;
        }
        newHead.next = Merge(list1,list2);
        return newHead;
    }
}
