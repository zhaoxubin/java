public TreeNode Convert(TreeNode pRootOfTree){
        //基于递归方式来完成双向链表构建，为了保证有序性，需要中序遍历
        //二叉搜索树的中序遍历结果是有序
        if(pRootOfTree == null){
            return null;
        }
        if(pRootOfTree.left == null && pRootOfTree.right == null ){
            //当前这个结点没有子树
            return pRootOfTree;
        }
        //最终链表 =》 左子树的链表 + 根节点 + 右子树的链表
        //1.先递归处理左子树
        //left 就是左子树的链表的根节点
        TreeNode left = Convert(pRootOfTree.left);
        //2.需要找到左子树链表的尾结点
        TreeNode leftTail = left;
        while(leftTail != null && leftTail.right != null){
            leftTail = leftTail.right;
        }
        //循环结束，leftTail就是左子树链表的尾部
        //把左子树和当前链表连在一起
        if(left != null){
            leftTail.right = pRootOfTree;
            pRootOfTree.left = leftTail;
        }
        //递归转换右子树，把右子树也变成双向链表
        TreeNode right = Convert(pRootOfTree.right);
        //把当前结点和右子树连在一起
        if(right != null){
            pRootOfTree.right = right;
            right.left = pRootOfTree;
        }
        //最终返回新的头节点
        if(left == null){
            return pRootOfTree;
        }
        return left;
    }