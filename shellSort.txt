public static void shellSort(int[] array){
        int gap = array.length/2;
        while(gap > 1){
            //需要循环进行分组插排
            shellSortGap(array,gap);
            gap/=2;
        }
        shellSortGap(array,1); //当gap为1时再进行一次插排
}
public static void shellSortGap(int[] array,int gap){
    //通过bound划分出两个区间
    //[0，bound)表示已排序区间
    //[bound，size )为待排序区间
    for (int bound = gap; bound < array.length  ; bound++) {//默认0号位置已将是排序得了，从1开始
        int v = array[bound];//取出bound位置元素往前插
        int cur = bound-gap; //从bound-1的位置开始找位置, //找到同组中的上一个元素
        for(;cur >= 0; cur -= gap){
            if(array[cur] > v){ //注意如果这个条件写成>=依旧可以完成排序，但是不为稳定排序了
                array[cur+gap] = array[cur];
            }else {
                break;//找到了合适的位置
            }
        }
        //此时的cur+1位置即要插入的位置
        array[cur+gap] = v;
    }
}