

解决思路1：动态规划
public class Solution {
    public int JumpFloor(int target) {
        int[] dp = new int[target+1];
        dp[0] = 1;
        dp[1] = 1;
        for(int i = 2; i <= target; i++){
            dp[i] = dp[i-1] + dp[i-2];
        }
        return dp[target];
    }
}

解决思路二：迭代

public class Solution {
    public int JumpFloor(int target) {
       if(target == 0){
           return 1;
       }
        if(target <= 2){
            return target;
        }
        int first = 1;
        int second = 1;
        int third = 1;
        for(int i = 2; i <= target; i++ ){
            third = first + second;
            first = second;
            second = third;
        }
        return third;
    }
}
